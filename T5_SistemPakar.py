# -*- coding: utf-8 -*-
"""prakAI4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VDBoFnRl8DaNLcR0Z9twbM9T1NiZSzwN
"""

!pip install experta

!pip install --upgrade frozendict

from experta import *

class Diagnosis(KnowledgeEngine):
    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(fatigue=True))
    def flu(self):
        print("Diagnosis: You may have the flu.")

    @Rule(Fact(cough=True) & Fact(fever=True) & Fact(breething_difficulty=True))
    def pneumonia(self):
        print("Diagnosis: You may have Pneumonia.")

    @Rule(Fact(sneezing=True) & Fact(runny_nose=True) & Fact(cough=False))
    def cold(self):
        print("Diagnosis: You may have a common cold.")

    @Rule(Fact(sore_throat=True) & Fact(fever=True))
    def throat_infection(self):
        print("Diagnosis: You may have a throat infection.")

    @Rule(Fact(cough=False) & Fact(fever=False) & Fact(fatigue=False))
    def healthy(self):
        print("Diagnosis: You seem to be healthy.")

    # Penyakit tambahan:
    @Rule(Fact(headache=True) & Fact(nausea=True) & Fact(sensitivity_to_light=True))
    def migraine(self):
        print("Diagnosis: You may be experiencing a migraine.")

    @Rule(Fact(stomach_pain=True) & Fact(diarrhea=True) & Fact(nausea=True))
    def food_poisoning(self):
        print("Diagnosis: You may have food poisoning.")

    @Rule(Fact(joint_pain=True) & Fact(rash=True) & Fact(fever=True))
    def dengue(self):
        print("Diagnosis: You may have dengue fever.")

    @Rule(Fact(burning_urination=True) & Fact(lower_abdominal_pain=True) & Fact(frequent_urination=True))
    def uti(self):
        print("Diagnosis: You may have a urinary tract infection (UTI).")

def get_input():
    """Helper function to get user input as boolean (yes/no)."""
    def ask_question(question):
        return input(question + " (yes/no): ").strip().lower() == "yes"

    return {
        "cough": ask_question("Do you have a cough?"),
        "fever": ask_question("Do you have a fever?"),
        "fatigue": ask_question("Do you feel fatigued?"),
        "breething_difficulty": ask_question("Do you have difficulty breathing?"),
        "sneezing": ask_question("Are you sneezing?"),
        "runny_nose": ask_question("Do you have a runny nose?"),
        "sore_throat": ask_question("Do you have a sore throat?"),
        "headache": ask_question("Do you have a headache?"),
        "nausea": ask_question("Do you feel nauseous?"),
        "sensitivity_to_light": ask_question("Are you sensitive to light?"),
        "stomach_pain": ask_question("Do you have stomach pain?"),
        "diarrhea": ask_question("Do you have diarrhea?"),
        "joint_pain": ask_question("Do you have joint pain?"),
        "rash": ask_question("Do you have a skin rash?"),
        "burning_urination": ask_question("Do you feel burning while urinating?"),
        "lower_abdominal_pain": ask_question("Do you feel lower abdominal pain?"),
        "frequent_urination": ask_question("Are you urinating more frequently than usual?")
    }

# Running the Expert System
if __name__ == "__main__":
    symptoms = get_input()
    engine = Diagnosis()
    engine.reset()

    for symptom, present in symptoms.items():
        engine.declare(Fact(**{symptom: present}))

    engine.run()

from experta import *

class SistemPakarMedis(KnowledgeEngine):
  @Rule(Fact(demam=True) & Fact(batuk=True))
  def flu(self):
    print("Diagnosis: Flu.")

  @Rule(Fact(sakit_tenggorokan=True) & Fact(demam=True))
  def throat_infection(self):
    print("Diagnosis: Radang Tenggorokan.")

# Running the Expert System
engine = SistemPakarMedis()
engine.reset()

# Menambahkan fakta ke dalam engine
engine.declare(Fact(demam=True))
engine.declare(Fact(batuk=True))

engine.run()

def forward_chaining(facts, rules):
  inferred = set(facts)
  changed = True

  while changed:
    changed = False
    for rule in rules:
      if rule["if"].issubset(inferred) and rule["then"] not in inferred:
        inferred.add(rule["then"])
        changed = True

  return inferred

facts = {"has_feathers", "can_fly", "lays_eggs"}
rules = [
    {"if": {"has_feathers", "can_fly"}, "then": "is_bird"},
    {"if": {"lays_eggs", "is_bird"}, "then": "is_chicken"}
]

result = forward_chaining(facts, rules)
print("inferred facts", result)

def backward_chaining(goal, facts, rules):
  if goal in facts:
    return True
  for rule in rules:
    if rule["then"] == goal:
      if all(backward_chaining(cond, facts, rules) for cond in rule["if"]):
        return True
  return False

facts = {"likes_computers", "solves_problems"}
rules = [
    {"if": {"likes_computers", "solves_problems"}, "then": "should_be_engineer"},
    {"if": {"should_be_enginer", "likes_programming"}, "then": "software_engineer"}
]

goal = "software_engineer"
result = backward_chaining(goal, facts, rules)
print(f"Is '{goal}' provable? -> ", result)

